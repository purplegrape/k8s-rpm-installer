#!/usr/bin/env bash

better_echo(){
  count=$[$count + 1]
  echo -e "\033[31m## Step $count ##\033[33m" $1
}

check_user(){
  better_echo "\033[32m checking user.\033[0m"
  getent group  kube > /dev/null || groupadd -r kube
  getent passwd kube > /dev/null || useradd -r -g kube -s /sbin/nologin -d / kube
  echo -e "\033[32m OK \033[0m"
}

create_yum_repo(){
yum install centos-release-virt-common epel-release -y
cat > /etc/yum.repos.d/kube.repo <<EOF
[kubernetes110]
name=kubernetes110
baseurl=http://mirrors.ustc.edu.cn/centos/7/virt/x86_64/kubernetes110/
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-Virtualization
EOF
}

install_rpms_master(){
  better_echo "\033[32m install rpms for kubernetes master.\033[0m"
  create_yum_repo
  yum install epel-release -q -y
  yum install bash-completion moreutils openssl -q -y
  yum install kubernetes-master kubernetes-client -q -y
  echo -e "\033[32m OK \033[0m"
}

install_rpms_node(){
  better_echo "\033[32m install rpms for kubernetes node.\033[0m"
  create_yum_repo
  yum install epel-release -q -y
  yum install bash-completion bridge-utils containernetworking-plugins conntrack-tools ebtables ipset socat -q -y
  yum install kubernetes-node -q -y
  echo -e "\033[32m OK \033[0m"
}

install_docker(){
  better_echo "\033[32m setting up docker.\033[0m"
  echo -e "{\n\t\"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n}" > /etc/docker/daemon.json
  yum install docker lvm2 device-mapper-persistent-data -q -y
  systemctl enable docker
  systemctl restart docker
  sleep 1
  echo -e "\033[32m OK \033[0m"
}

install_etcd(){
  better_echo "\033[32m install etcd.\033[0m"
  yum install etcd -y
  rm -rf /var/lib/etcd/*
  systemctl enable etcd
  systemctl restart etcd
  echo -e "\033[32m OK \033[0m"
}

keygen_ca(){
  better_echo "\033[32m generate CA keys.\033[0m"
  mkdir -p /etc/kubernetes/pki
  pushd /etc/kubernetes/pki
    openssl genrsa -out ca.key 4096
    openssl req -x509 -new -nodes -key ca.key -subj "/CN=k8s-cluster" -days 3650 -out ca.crt
  popd
  echo -e "\033[32m OK \033[0m"
}

keygen_apiserver(){
  better_echo "\033[32m generate apiserver keys.\033[0m"
  mkdir -p /etc/kubernetes/pki
  cat > /etc/kubernetes/pki/openssl.cnf <<EOF
  [req]
  req_extensions = v3_req
  distinguished_name = req_distinguished_name
  [req_distinguished_name]
  [ v3_req ]
  basicConstraints = CA:FALSE
  keyUsage = nonRepudiation, digitalSignature, keyEncipherment
  subjectAltName = @alt_names
  [alt_names]
  DNS.1 = kubernetes
  DNS.2 = kubernetes.default
  DNS.3 = kubernetes.default.svc
  DNS.4 = kubernetes.default.svc.cluster.local
  DNS.5 = k8s-master
  DNS.6 = $HOSTNAME
  IP.1 = $(ifdata -pa eth0)
  IP.2 = 10.254.0.1
EOF

  pushd /etc/kubernetes/pki
    openssl genrsa -out apiserver.key 4096
    openssl req -new -key apiserver.key -subj "/CN=k8s-master" -config openssl.cnf -out apiserver.csr
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 \
      -extensions v3_req -extfile openssl.cnf -out apiserver.crt
  popd
  echo -e "\033[32m OK \033[0m"
}

keygen_user(){
  better_echo "\033[32m generate keys for user $1.\033[0m"
  mkdir -p /etc/kubernetes/pki
  username=$1
  pushd /etc/kubernetes/pki
    openssl genrsa -out $username.key 4096
    openssl req -new -key $username.key -subj "/CN=$username" -out $username.csr
    openssl x509 -req -in $username.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 3650 -out $username.crt
  popd
  echo -e "\033[32m OK \033[0m"
}

keygen(){
  rm -rf /etc/kubernetes/pki
  keygen_ca
  keygen_apiserver
  keygen_user admin
  keygen_user kube-scheduler
  keygen_user kubelet
  keygen_user kube-proxy
  keygen_user etcd
}

kubeconfig_local_admin(){
  better_echo "\033[32m generate kubeconfig for local admin.\033[0m"
  mkdir -p /root/.kube/
  > /root/.kube/config
  unset KUBECONFIG
  export KUBECONFIG=/root/.kube/config
  kubectl config set-cluster default-cluster --server=http://127.0.0.1:8080 --insecure-skip-tls-verify=true
  kubectl config set-context default-system --cluster=default-cluster --user=cluster-admin --namespace=default
  kubectl config use-context default-system
  kubectl completion bash > /etc/bash_completion.d/kubectl.bash
  echo -e "\033[32m OK \033[0m"
}

kubeconfig_user(){
  better_echo "\033[32m generate kubeconfig for $1.\033[0m"
  username=$1
  CA_CERT="/etc/kubernetes/pki/ca.crt"
  CLIENT_CERT="/etc/kubernetes/pki/$username.crt"
  CLIENT_KEY="/etc/kubernetes/pki/$username.key"

  TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/[:space:]" | dd bs=32 count=1 2>/dev/null)
  MASTER_IP=$(ifdata -pa eth0)

  mkdir -p /etc/kubernetes
  > /etc/kubernetes/$username.kubeconfig
  unset KUBECONFIG
  export KUBECONFIG=/etc/kubernetes/$username.kubeconfig
  kubectl config set-cluster default-cluster --server=https://$MASTER_IP:6443 --certificate-authority=$CA_CERT --embed-certs=true
  kubectl config set-credentials $username --client-certificate=$CLIENT_CERT --client-key=$CLIENT_KEY --embed-certs=true --token=$TOKEN
  kubectl config set-context default-system --cluster=default-cluster --user=$username
  kubectl config use-context default-system
  echo -e "\033[32m OK \033[0m"
}

gen_kubeconfig(){
  kubeconfig_local_admin
  kubeconfig_user admin
  kubeconfig_user kube-scheduler
  kubeconfig_user kubelet
  kubeconfig_user kube-proxy
}

create_clusterrolebinding(){
  better_echo "\033[32m create clusterrolebonding.\033[0m"
  export KUBECONFIG=/root/.kube/config
  kubectl create clusterrolebinding mybonding-node --clusterrole=system:node --user=kubelet --group=system:node
  kubectl create clusterrolebinding mybonding-node-proxier --clusterrole=system:node-proxier --user=kube-proxy
  kubectl create clusterrolebinding mybonding-kube-scheduler --clusterrole=system:kube-scheduler --user=kube-scheduler
  kubectl create clusterrolebinding mybonding-volume-scheduler --clusterrole=system:volume-scheduler --user=kube-scheduler
  kubectl create clusterrolebinding mybonding-admin --clusterrole=cluster-admin --user=admin
  echo -e "\033[32m OK \033[0m"
}

config_apiserver(){
  better_echo "\033[32m config kube-apiserver.\033[0m"
  install -D -m 644 files/etc/sysconfig/kube-apiserver /etc/sysconfig/kube-apiserver
  install -D -m 644 files/usr/lib/systemd/system/kube-apiserver.service /usr/lib/systemd/system/kube-apiserver.service
  systemctl daemon-reload
  systemctl enable kube-apiserver
  systemctl restart kube-apiserver
  sleep 5
  echo -e "\033[32m OK \033[0m"
}

config_scheduler(){
  better_echo "\033[32m config kube-scheduler.\033[0m"
  install -D -m 644 files/etc/sysconfig/kube-scheduler /etc/sysconfig/kube-scheduler
  install -D -m 644 files/usr/lib/systemd/system/kube-scheduler.service /usr/lib/systemd/system/kube-scheduler.service
  systemctl daemon-reload
  systemctl enable kube-scheduler
  systemctl restart kube-scheduler
  echo -e "\033[32m OK \033[0m"
}

config_controller_manager(){
  better_echo "\033[32m config kube-controller-manager.\033[0m"
  install -D -m 644 files/etc/sysconfig/kube-controller-manager /etc/sysconfig/kube-controller-manager
  install -D -m 644 files/usr/lib/systemd/system/kube-controller-manager.service /usr/lib/systemd/system/kube-controller-manager.service
  systemctl daemon-reload
  systemctl enable kube-controller-manager
  systemctl restart kube-controller-manager
  echo -e "\033[32m OK \033[0m"
}

config_kubelet(){
cat > /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
  sysctl -q --system
  better_echo "\033[32m config kubelet.\033[0m"
  mkdir -p /var/lib/kubelet
  install -D -m 644 files/etc/sysconfig/kubelet /etc/sysconfig/kubelet
  install -D -m 644 files/usr/lib/systemd/system/kubelet.service /usr/lib/systemd/system/kubelet.service
  install -D -m 644 files/etc/cni/net.d/20-loopback.conf /etc/cni/net.d/20-loopback.conf
  install -D -m 644 files/etc/cni/net.d/30-cni-bridge.conf /etc/cni/net.d/30-cni-bridge.conf 
  systemctl daemon-reload
  systemctl enable kubelet
  if [ -f /etc/kubernetes/kubelet.kubeconfig ];then
    systemctl restart kubelet
    sleep 5
    else
    echo -e "\033[31mWarning:\033[0m\nBefore start kubelet,please copy the following file from kubernetes master"
    echo -e "\033[32m/etc/kubernetes/kubelet.kubeconfig\033[0m"
    exit 1
  fi
  echo -e "\033[32m OK \033[0m"
}

config_kube_proxy(){
  better_echo "\033[32m config kube-proxy.\033[0m"
  install -D -m 644 files/etc/sysconfig/kube-proxy /etc/sysconfig/kube-proxy
  install -D -m 644 files/usr/lib/systemd/system/kube-proxy.service /usr/lib/systemd/system/kube-proxy.service
  echo -e "ip_vs\nip_vs_rr\nip_vs_wrr\nip_vs_sh" > /etc/modules-load.d/ipvs.conf
  systemctl daemon-reload
  systemctl enable kube-proxy
  if [ -f /etc/kubernetes/kube-proxy.kubeconfig ];then
    systemctl restart kube-proxy
    sleep 5
    else
    echo -e "\033[31mWarning:\033[0m\nBefore start kube-proxy,\nplease copy the following file from kubernetes master"
    echo -e "\033[32m/etc/kubernetes/kube-proxy.kubeconfig\033[0m"
    exit 1
  fi
  echo -e "\033[32m OK \033[0m"
}

clean_iptables_rules(){
  iptables -t nat -F
  iptables -t nat -X
  iptables -t nat -Z
  
  iptables -P INPUT ACCEPT
  iptables -P FORWARD ACCEPT
  iptables -P OUTPUT ACCEPT
  
  iptables -F
  iptables -X
  iptables -Z
  
  iptables-save > /etc/sysconfig/iptables
  sysctl -q -w net.ipv4.ip_forward=1
}

cleanup(){
  better_echo "\033[32m cleanup services and files.\033[0m"
  systemctl stop kubelet kube-proxy || true
  systemctl stop kube-scheduler kube-controller-manager || true
  systemctl stop kube-apiserver || true
  systemctl stop etcd || true
  rm -rf /etc/kubernetes /etc/sysconfig/kube* /etc/cni/net.d
  rm -rf /var/lib/etcd/* /var/lib/kubelet /var/run/kubernetes
  rm -rf /usr/lib/systemd/system/kube*
  systemctl daemon-reload
  clean_iptables_rules
  echo -e "\033[32m OK \033[0m"
}

# the end
